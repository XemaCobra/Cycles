{"name":"Cycles","tagline":"HTTP library written in Swift","body":"Cycles\r\n====\r\n\r\n[Cycles is in early development, not fully tested. It's also iOS only for now.]\r\n\r\nCycles is a HTTP library written in Swift, inspired by [AFNetworking](http://afnetworking.com/)\r\nand [Requests](http://docs.python-requests.org/). The target of Cycles is to\r\nfree you from writing glue code around the NSURLSession classes.\r\n\r\n```\r\nCycle.get(\"https://api.github.com/user/\",\r\n    requestProcessors: [BasicAuthProcessor(username: \"user\", password: \"pass\")],\r\n    responseProcessors: [JSONProcessor()],\r\n    completionHandler: { (cycle, error) in\r\n        println(\"\\(cycle.response.statusCode)\") // 200\r\n        var header = cycle.response.valueForHTTPHeaderField(\"content-type\")\r\n        println(\"\\(header)\") // application/json; charset=utf-8\r\n        println(\"\\(cycle.response.textEncoding)\") // 4\r\n        println(\"\\(cycle.response.text)\") // {\"login\":\"user\",\"id\":3 ...\r\n        println(\"\\(cycle.response.object)\") // {\"avatar_url\" = ...\r\n    })\r\n```\r\n\r\nCycles offers a set of higher-level objects. With these objects, there is no\r\nneed to manually build query strings, or to create collection objects from\r\nJSON response. More importantly, Cycles is designed in a way to help you build\r\nHTTP functionality into your model layer. Also, properties like `solicited`\r\nencourage you to build delightful user experiences.\r\n\r\nMaking HTTP requests is simple with Cycles. Here is a handful of examples:\r\n\r\nSend a GET request.\r\n```\r\nCycle.get(\"http://www.apple.com\", completionHandler: { (cycle, error) in\r\n        println(\"\\(cycle.response.text)\") // <!DOCTYPE html>...\r\n    })\r\n```\r\n\r\nPOST collection objects with JSON format and receive collection objects from\r\nJSON response.\r\n```\r\nCycle.post(\"http://127.0.0.1:8000/test/dumpupload/\",\r\n    requestObject: NSDictionary(object: \"v1\", forKey: \"k1\"),\r\n    requestProcessors: [JSONProcessor()],\r\n    responseProcessors: [JSONProcessor()],\r\n    completionHandler: {(cycle, error) in\r\n        println(\"\\(cycle.response.object)\") // { k1 = v1; }\r\n    })\r\n```\r\n\r\n\r\nUpload a NSData\r\n```\r\nCycle.upload(\"http://127.0.0.1:8000/test/dumpupload/\",\r\n    data: \"Hello World\".dataUsingEncoding(NSUTF8StringEncoding),\r\n    completionHandler: {\r\n        (cycle, error) in\r\n        println(\"\\(cycle.response.text)\") // Hello World\r\n    })\r\n```\r\n\r\nDownload a file\r\n```\r\nCycle.download(\"http://127.0.0.1:8000/test/echo?content=helloworld\",\r\n    downloadFileHandler: {(cycle, location) in\r\n        var content = NSString(contentsOfURL: location,\r\n                        encoding: NSUTF8StringEncoding, error: nil)\r\n        println(\"\\(content)\") // helloworld\r\n    },\r\n    completionHandler: {(cycle, error) in\r\n        println(\"\\(cycle.response.statusCode)\") // 200\r\n    })\r\n```\r\n\r\nFor more information, please [read the documentation](http://cycles.readthedocs.org/).\r\n\r\n\r\nInstallation\r\n====\r\nCycles hasn't been packaged as a framework for now. You will have to add the\r\n[source files](https://github.com/weipin/Cycles/tree/master/source) to your\r\nown project to use Cycles.\r\n\r\n- Add all files in the \"source\" folder to your project.\r\n\r\nSupport\r\n====\r\nPlease use the [issues system](https://github.com/weipin/Cycles/issues). We look\r\nforward to hearing your thoughts on the project.\r\n\r\nKnown Issues\r\n====\r\n1. Namespace. If Cycles were written in Objective-C, a prefix will be applied to\r\n   the classes and global variables. Swift, on the other hand, is supposed to\r\n   have namespaces. While it's uncertain how to distinguish between identifiers\r\n   with the same exact name in Swift, identifiers in Cycles have no prefix.  \r\n1. UIAlertController's presenting view controller. BasicAuthentication can\r\n   present an alert view for user to input username and password. This is\r\n   achieved by creating a UIAlertController with username and password fields.\r\n   Unlike UIAlertView, before a controller can be presented, a presenting view\r\n   controller is required. That's the purpose of BasicAuthentication's property\r\n   `presentingViewController`. The problem is that if the presenting view\r\n   controller isn't visible, or if there is a modal controller already\r\n   presented, the UIAlertController won't be displayed. It might be necessary\r\n   to switch back to UIViewAlert, but \"showing\" a UIAlertView keeps crashing\r\n   the app at the time the code was written.\r\n\r\n\r\nLicense\r\n====\r\nCycles is released under the MIT license. See [LICENSE.md](https://github.com/weipin/Cycles/blob/master/LICENSE).\r\n","google":"UA-379019-12","note":"Don't delete this file! It's used internally to help with page regeneration."}